# -*- coding: utf-8 -*-
"""FileManagement_Sytem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SdPwyGTULwBE_5vG_I3aaJWtEBEc4ut-
"""

print('This is the start for text processing')

"""Text Processing with a corpus text"""

from google.colab import drive
drive.mount('/content/drive')
path = '/content/drive/MyDrive/data.txt'

with open(path, 'r') as f:
  data = f.read()
  print(data)

data.replace('\n\n','  ')

par = data.split('\n\n')
#print(len(par))
for i in par:
  wor = i.split()
  #print(i[0:6], len(wor))
word = data.split()
print(word)
print(len(word))

#removing or replace unncesary charcters with whitespace
for i in range(3,14):
  pattern = '['+ str(i) +']'
  data = data.replace(pattern,'')
print(data)

p = '/content/drive/My Drive/data1.txt'
with open(p,'a') as f:
  txt = input('Enter the input: ')
  txt = txt + '.\n'
  f.write(txt)

myfile = '/content/drive/My Drive/myfile.txt'
with open(myfile,"w+") as myf:
  myf.write("This is Delhi \n")
  myf.writelines(["This is Delhi \n","This is Paris \n","This is London \n"])
  myf.seek(0)
  lines = myf.read()
  #print(lines)

with open(myfile,"r+") as file1:
  file1.seek(0)

  '''print( "Output of Readline function is ")
  print(file1.readline())
  print()'''

  file1.seek(0)

# To show difference between read and readline
  print("Output of Read(9) function is ")
  print(file1.read(9))
  print()

  file1.seek(0)
  print("Output of Readline(9) function is ")
  print(file1.readline(9))

  file1.seek(0)
  # readlines function
  '''print("Output of Readlines function is ")
  print(file1.readlines())
  print()'''

"""Inventory Management System:"""

from google.colab import drive
drive.mount('/content/drive')

import time
path = '/content/drive/My Drive/ivm.txt'
path1 = '/content/drive/My Drive/sales.txt'
#path to the inventory file

with open(path,'r') as f:
  file = f.read().split('\n')
  #opened file and got each product as a list

name  = input('Enter name: ')
num = input('Enter phone number: ')
mail = input('Enter email: ')
user_id = input('Enter the product id: ')
user_quantity = input('Enter the quantity: ')
#taking input from user

updated_details = []
#created list for the updated inventory

for product in file:
    product_details = product.split(',')
    #got each detail of product into a list

    if(user_id == product_details[0]):
      #if the user id and the product id matches following block is executed
      print('Test', product_details[3])

      if(int(user_quantity) <= int(product_details[3])):
        #checking if we have enough inventory
        print(user_quantity)
        print('-'*30)
        print('Product: ', product_details[1])
        print('Quantity ', user_quantity)
        print('Price: ', product_details[2])
        print('-'*30)
        print('Billing Amount: ', int(user_quantity) * int(product_details[2]))
        #genrating bill

        print('-'*30)
        product_details[3] = str(int(product_details[3])-int(user_quantity))
        #updating inventory
        with open(path1, 'a') as f:
          sales_details = user_id + ',' + name +','+ num +','+ mail + ','+ product_details[1] + ',' + user_quantity + ','+str(int(user_quantity) * int(product_details[2]))+time.ctime()+'\n'
          f.write(sales_details)

      else:
          print('Sorry, we are not having that much of quantity.')
          print('We are only having', product_details[3], 'quantity.')
          print('Would you like to purchase it?')
          ch = input('Press Y/N: ')
          #if we do not have enough inventory
          #displaying the inventory we have
          #and asking if the customer is willing to buy

          if(ch == 'Y' or ch == 'y'):
            print('-'*30)
            print('Product: ', product_details[1])
            print('Quantity ', product_details[3])
            print('Price: ', product_details[2])
            print('-'*30)
            print('Billing Amount: ', int(product_details[3]) * int(product_details[2]))
            #if customer enters y or Y
            #bill is generated
            print('-'*30)

            #as inventory is sold updating it to zero
            with open(path1, 'a') as f:
              sales_details = user_id + ',' + name +','+ num +','+ mail + ','+ product_details[1] + ',' + product_details[3] + ','+str(int(product_details[3]) * int(product_details[2]))+time.ctime()+'\n'
              f.write(sales_details)
            product_details[3] = str(0)
          else:
            print('Thanks')
            #for any other input, printing thanks
    updated_details.append(product_details)
    #writing each product details after checking


lst = []
for i in updated_details:
  #for every product in updated list
  #creating the product in required format
  a = i[0]+ "," +i[1]+ ","+ i[2]+ ","+i[3]+ '\n'
  lst.append(a)
lst[-1] = lst[-1][:-1]
#removing \n for last product to avoid empty item in list

with open(path, 'w') as f:
  for i in lst:
    f.write(i)
    #writing all the product details into file

print('_'*30)
print('Inventory Updated')